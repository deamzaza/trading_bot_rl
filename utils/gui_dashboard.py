import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import os
from stable_baselines3 import PPO
from utils.env_rl import CryptoTradingEnv
from utils.binance_utils import get_historical_data
from dotenv import load_dotenv

load_dotenv()

st.set_page_config(page_title="RL Trading Bot", layout="wide")

st.title("üìà AI Trading Bot Dashboard")
st.markdown("‡∏£‡∏∞‡∏ö‡∏ö Reinforcement Learning ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ó‡∏£‡∏î‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")

# --- Config ---
symbol = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç", ["BTCUSDT", "ETHUSDT", "BNBUSDT"])
start_date = st.sidebar.date_input("‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", pd.to_datetime("2022-01-01"))
end_date = st.sidebar.date_input("‡∏ß‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", pd.to_datetime("2022-12-31"))

if st.sidebar.button("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"):
    df = get_historical_data(symbol, start_date.strftime("%d %b, %Y"), end_date.strftime("%d %b, %Y"), "1h")
    st.session_state["df"] = df
    st.success("üìä ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")

# --- Display Chart ---
if "df" in st.session_state:
    st.subheader(f"‡∏£‡∏≤‡∏Ñ‡∏≤‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á {symbol}")
    st.line_chart(st.session_state["df"]["close"])

    # Load model
    if os.path.exists(f"models/{symbol}_ppo_model.zip"):
        st.subheader("ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö...")
        model = PPO.load(f"models/{symbol}_ppo_model.zip")

        env = CryptoTradingEnv(st.session_state["df"])
        obs = env.reset()
        rewards = []
        portfolio_values = []

        for _ in range(len(st.session_state["df"])):
            action, _ = model.predict(obs)
            obs, reward, done, _ = env.step(action)
            rewards.append(reward)
            portfolio_values.append(env.net_worth)
            if done:
                break

        st.subheader("üí∞ Portfolio Value")
        st.line_chart(portfolio_values)

        st.subheader("üìà ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≥‡πÑ‡∏£")
        st.write(f"üìä ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢: ${env.net_worth - env.initial_balance:,.2f}")

    else:
        st.warning("‚ùó ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏£‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå `models/`")

else:
    st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î '‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö")
